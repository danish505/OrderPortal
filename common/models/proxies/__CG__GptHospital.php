<?php

namespace Proxies\__CG__;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class GptHospital extends \GptHospital implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'GptHospital' . "\0" . 'hospitalId', '' . "\0" . 'GptHospital' . "\0" . 'hospitalName', '' . "\0" . 'GptHospital' . "\0" . 'hospitalType', '' . "\0" . 'GptHospital' . "\0" . 'hospitalUrl', '' . "\0" . 'GptHospital' . "\0" . 'inContract', '' . "\0" . 'GptHospital' . "\0" . 'activeFlg', '' . "\0" . 'GptHospital' . "\0" . 'lastVerifiedDt', '' . "\0" . 'GptHospital' . "\0" . 'createTs', '' . "\0" . 'GptHospital' . "\0" . 'updateTs', '' . "\0" . 'GptHospital' . "\0" . 'departments', '' . "\0" . 'GptHospital' . "\0" . 'affiliates'];
        }

        return ['__isInitialized__', '' . "\0" . 'GptHospital' . "\0" . 'hospitalId', '' . "\0" . 'GptHospital' . "\0" . 'hospitalName', '' . "\0" . 'GptHospital' . "\0" . 'hospitalType', '' . "\0" . 'GptHospital' . "\0" . 'hospitalUrl', '' . "\0" . 'GptHospital' . "\0" . 'inContract', '' . "\0" . 'GptHospital' . "\0" . 'activeFlg', '' . "\0" . 'GptHospital' . "\0" . 'lastVerifiedDt', '' . "\0" . 'GptHospital' . "\0" . 'createTs', '' . "\0" . 'GptHospital' . "\0" . 'updateTs', '' . "\0" . 'GptHospital' . "\0" . 'departments', '' . "\0" . 'GptHospital' . "\0" . 'affiliates'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (GptHospital $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getHospitalName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHospitalName', []);

        return parent::getHospitalName();
    }

    /**
     * {@inheritDoc}
     */
    public function setHospitalName($hospitalName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHospitalName', [$hospitalName]);

        return parent::setHospitalName($hospitalName);
    }

    /**
     * {@inheritDoc}
     */
    public function getHospitalType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHospitalType', []);

        return parent::getHospitalType();
    }

    /**
     * {@inheritDoc}
     */
    public function setHospitalType($hospitalType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHospitalType', [$hospitalType]);

        return parent::setHospitalType($hospitalType);
    }

    /**
     * {@inheritDoc}
     */
    public function getHospitalUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHospitalUrl', []);

        return parent::getHospitalUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setHospitalUrl($hospitalUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHospitalUrl', [$hospitalUrl]);

        return parent::setHospitalUrl($hospitalUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function setInContract($inContract)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInContract', [$inContract]);

        return parent::setInContract($inContract);
    }

    /**
     * {@inheritDoc}
     */
    public function getInContract()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInContract', []);

        return parent::getInContract();
    }

    /**
     * {@inheritDoc}
     */
    public function preCreate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preCreate', []);

        return parent::preCreate();
    }

    /**
     * {@inheritDoc}
     */
    public function toJson()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toJson', []);

        return parent::toJson();
    }

    /**
     * {@inheritDoc}
     */
    public function addDepartment($department)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDepartment', [$department]);

        return parent::addDepartment($department);
    }

    /**
     * {@inheritDoc}
     */
    public function getDepartments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDepartments', []);

        return parent::getDepartments();
    }

    /**
     * {@inheritDoc}
     */
    public function addAffiliate($hospital)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAffiliate', [$hospital]);

        return parent::addAffiliate($hospital);
    }

    /**
     * {@inheritDoc}
     */
    public function getAffiliates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAffiliates', []);

        return parent::getAffiliates();
    }

}
